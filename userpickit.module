<?php

/**
 * @file
 * Main file for User Pic Kit.
 */

module_load_include('inc', 'userpickit', 'userpickit.user');
module_load_include('inc', 'userpickit', 'userpickit.admin');

/**
 * Key to store user picture type preference in $user->data.
 *
 * @see userpickit_user_picture_type_set()
 */
const USERPICKIT_USER_PICTURE_TYPE_CURRENT = 'userpickit_type'; 

/**
 * A cache will not expire when $cache->expire is set to this. Requires
 * manual invalidation.
 * 
 * @see userpickit_cache_set()
 * @see userpickit_user_picture_type_set()
 */
const USERPICKIT_CACHE_EXPIRE_NEVER = NULL;

/**
 * Implements hook_permission().
 */
function userpickit_permission() {
  $permissions = array();
  
  $permissions['administer userpickit'] = array(
    'title' => t('Administer User Pic Kit'), 
    'restrict access' => TRUE,
  );

  $picture_types = userpickit_types_all();

  foreach ($picture_types as $picture_type => $info) {
    $permissions['userpickit use ' . $picture_type . ' type'] = array(
      'title' => $info['title'], 
      'description' => t('Allow user to change picture to @title.', array(
        '@title' => $info['title'],
      )),
    );
  }

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function userpickit_menu() {
  $items = array();

  $items['admin/config/people/userpickit'] = array(
    'title' => 'User Pic Kit',
    'description' => 'Configure User Pic Kit',
    'file' => 'userpickit.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('userpickit_settings_form'),
    'access arguments' => array('administer userpickit')
  );

  return $items;
}
/**
 * Implements hook_entity_update().
 */
function userpickit_entity_update($entity, $entity_type) {
  _userpickit_entity_update_user($entity, $entity_type);
}

/**
 * Implements hook_user_presave().
 */
function userpickit_user_presave(&$edit, $account, $category) {
  _userpickit_user_presave_admin($edit, $account, $category);
}

/**
 * Implements template_preprocess_user_picture().
 *
 * For debugging purposes, instantly return; to show the picture in
 * $user->picture instead of potentially linking to a remote or cached file.
 */
function userpickit_preprocess_user_picture(&$variables) {
  $variables['user_picture'] = '';

  // $variables['account'] is not really the user account, it could be a user, 
  // node, or comment object. Rely on $account->uid/name/picture only.
  // @see template_preprocess_user_picture()
  $account = _userpickit_load_account($variables['account']);

  $path = userpickit_user_picture_path($account, NULL);

  // Create the picture
  $variables['user_picture'] = userpickit_render_picture($account, $path);

  // Link the picture
  if ($account->uid && user_access('access user profiles')) {
    // Create link to the user's profile.
    $attributes = array('title' => t('View user profile.'));
    $variables['user_picture'] = l($variables['user_picture'], 'user/' . $account->uid, array('attributes' => $attributes, 'html' => TRUE));
  }
  elseif (!empty($account->homepage)) {
    // User is anonymous
    $attributes = array('title' => t('View user website.'), 'rel' => 'external nofollow');
    $variables['user_picture'] = l($variables['user_picture'], $account->homepage, array('attributes' => $attributes, 'html' => TRUE));
  }
}

/**
 * Render markup for a users picture.
 *
 * @param unknown $account
 * @param unknown $path
 *
 * @return string
 *   HTML image markup.
 */
function userpickit_render_picture($account, $path, $style_name = NULL) {
  $variables = array(
    'path' => $path,
    'title' => t("@user's picture", array('@user' => format_username($account))),
  );
  $variables['alt'] = $variables['title'];

  $variables['style_name'] = !$style_name ? variable_get('user_picture_style', '') : $style_name;

  if (module_exists('image') && file_valid_uri($path) && image_style_load($variables['style_name'])) {
    // Internal
    return theme('image_style', $variables);
  }
  else {
    // Mostly External
    return theme('image', array('path' => $path));
  }
}

/**
 * Get information about a picture type for a user.
 *
 * @param string $picture_type
 *   Picture type.
 * @param object $account
 *   User object
 */
function userpickit_user_picture_type_info($picture_type, $account) {
  $picture_types = userpickit_types_all();

  if (array_key_exists($picture_type, $picture_types)) {
    $info = $picture_types[$picture_type];
    return module_invoke($info['module'], 'userpickit_picture', $picture_type, $account);
  }
}

/**
 * Get an uncached uri for a users picture type.
 */
function userpickit_user_picture_path_live($picture_type, $account) {
  $info = userpickit_user_picture_type_info($picture_type, $account);

  // Drupal file
  if (!empty($info['fid']) && is_numeric($info['fid'])) {
    $file = file_load($info['fid']);
    if ($file) {
      return $file->uri;
    }
  }
  elseif (!empty($info['uri']) && valid_url($info['uri'])) {
    return $info['uri'];
  }
}

function userpickit_user_picture_path_default($picture_type = NULL, $account = NULL) {
  $info = userpickit_type_info($picture_type);
  if ($info) {
    if (isset($info['default callback']) && is_callable($info['default callback'])) {
      $uri = $info['default callback']($picture_type, $account);
      if (userpickit_valid_uri($uri)) {
        return $uri;
      }
    }
  }

  return variable_get('user_picture_default', '');
}

/**
 * Get an picture uri for a user.
 * 
 * This will cache the uri, and if a picture is remote it may be downloaded
 * and cached locally.
 *
 * @param object $account
 *   User object.
 * @param string $picture_type
 *   Leave blank to use users default.
 */
function userpickit_user_picture_path($account = NULL, $picture_type = NULL) {
  $account = isset($account) ? $account : $GLOBALS['user'];
  $picture_type = isset($picture_type) ? $picture_type : userpickit_user_picture_type_get($account);
  $uri = '';

  if (userpickit_type_info($picture_type)) {
    // Check if in cache
    $cache = userpickit_cache_get($picture_type, $account->uid);

    if (!$cache || ($cache->expire < REQUEST_TIME && $cache->expire != USERPICKIT_CACHE_EXPIRE_NEVER)) {
      // Clean up old files
      if ($cache) {
        $cache_previous = $cache;
        if (is_numeric($cache_previous->fid)) {
          userpickit_picture_uncache($cache_previous->fid, $account);
        }
      }

      // Create new cache value
      $cache = new StdClass;
      $cache->fid = NULL;
      $cache->uri = '';
  
      $info = userpickit_user_picture_type_info($picture_type, $account);
      if ($info) {
        if (array_key_exists('cache lifetime', $info)) {
          $cache->expire = is_numeric($info['cache lifetime']) ? time() + $info['cache lifetime'] : $info['cache lifetime'];
        }
  
        // Drupal file
        if (!empty($info['fid']) && is_numeric($info['fid'])) {
          $file = file_load($info['fid']);
          if ($file && $file->status) {
            $cache->fid = $file->fid;
            $cache->uri = $file->uri;
            $uri = $file->uri;
          }
        }
  
        // Uri
        elseif (!empty($info['uri']) && valid_url($info['uri'])) {
          $cache->uri = $info['uri'];
          $uri = $info['uri'];
          $cache_locally = TRUE; // If the file is remote, not already local, cache it locally.
  
          if (!file_valid_uri($uri) && $cache_locally) {
            $file = userpickit_picture_cache($picture_type, $uri, $account);
  
            if ($file && $file->status) {
              $cache->fid = $file->fid;
              $uri = $file->uri;
            }
          }
        }
  
        userpickit_cache_set($picture_type, $account->uid, $cache);
        return $uri;
      }
    }
    else {
      // Cache is still valid
      if (!empty($cache->fid)) {
        $file = file_load($cache->fid);
        if ($file && !empty($file->uri)) {
          return $file->uri;
        }
      }
      elseif (!empty($cache->uri)) {
        return $cache->uri;
      }
    }

    // Cache may be in a state where uri and fid are empty.
    return userpickit_user_picture_path_default($picture_type, $account);
  }
}

/**
 * Download a file and associate it with userpickit.
 * 
 * @param $picture_type
 *   Picture type.
 * @param $uri
 *   URI of file to download.
 * @param $account
 *   Associate file with account.
 *
 * @return File object
 */
function userpickit_picture_cache($picture_type, $uri, $account) {
  $directory = 'public://userpickit/' . $picture_type;

  if (!file_valid_uri($uri) && file_prepare_directory($directory, FILE_CREATE_DIRECTORY)) {
    $image = system_retrieve_file($uri, $directory, TRUE);
    if ($image) {
      file_usage_add($image, 'userpickit', 'pictures', $account->uid);
      return $image;
    }
  }
}

/**
 * Disassociate and delete a file.
 *
 * @param $fid
 *   File ID.
 * @param $account
 *   Account disassociating file.
 */
function userpickit_picture_uncache($fid, $account) {
  $image = file_load($fid);
  if ($image) {
    file_usage_delete($image, 'userpickit', 'pictures', $account->uid);
    return file_delete($image);
  }
}

/**
 * Load all picture types.
 *
 * @return array
 */
function userpickit_types_all() {
  $picture_types = array();

  foreach (module_implements('userpickit_info') as $module) {
    foreach (module_invoke($module, 'userpickit_info') as $picture_type => $info) {
      $picture_types[$picture_type] = array(
        'module' => $module,
      ) + $info;
    }
  }

  return $picture_types;
}


function userpickit_type_info($picture_type) {
  $picture_types = userpickit_types_all();

  if ($picture_type && array_key_exists($picture_type, $picture_types)) {
    return $picture_types[$picture_type];
  }

  return FALSE;
}

/**
 * Get a users' picture type cache.
 *
 * @param string $picture_type
 *   Picture type.
 * @param int $uid
 *   User ID.
 *
 * @return object|boolean
 *   Row from {userpickit_pictures}, or FALSE.
 */
function userpickit_cache_get($picture_type, $uid) {
  return db_select('userpickit_pictures', 'f')
    ->fields('f', array('sid', 'expire', 'fid', 'uri'))
    ->condition('type', $picture_type)
    ->condition('uid', $uid)
    ->addTag(__FUNCTION__)
    ->execute()
    ->fetchObject();
}

/**
 * Create or update a users' picture type cache.
 * 
 * @param string $picture_type
 *   Picture type.
 * @param int $uid
 *   User ID.
 * @param object $row
 *   Data to save.
 * 
 * @return object|boolean
 *   Row from {userpickit_pictures}, or FALSE. 
 */
function userpickit_cache_set($picture_type, $uid, $row) {
  $row = (array)$row + array(
    'expire' => time() + 3600,
  );

  db_merge('userpickit_pictures')
    ->key(array(
      'type' => $picture_type,
      'uid' => $uid,
    ))
    ->fields($row)
    ->execute();
}

/**
 * Delete and rebuild cache for a users picture type.
 *
 * @param string $picture_type
 *   Picture type.
 * @param object $account
 *   User object.
 */
function userpickit_cache_rebuild($picture_type, $account) {
  userpickit_cache_invalidate($picture_type, $account->uid, TRUE);
  userpickit_user_picture_path($account, $picture_type);
}

/**
 * Invalidate a user picture cache.
 *
 * Invalidating a picture is done by setting the date to some time in the past.
 * The row should not be deleted as to maintain file (fid) association and so
 * something can be displayed to while a new cache is rebuilt.
 * 
 * @param string $picture_type
 *   Picture type.
 * @param int $uid
 *   User ID.
 * @param boolean $force
 *   Set to TRUE only if the original file no longer exists.
 */
function userpickit_cache_invalidate($picture_type, $uid, $force = FALSE) {
  if ($force) {
    db_delete('userpickit_pictures')
      ->condition('type', $picture_type)
      ->condition('uid', $uid)
      ->execute();
  }
  else {
    db_update('userpickit_pictures')
      ->fields(array('expire' => 0))
      ->condition('type', $picture_type)
      ->condition('uid', $uid)
      ->execute();
  }
}

/**
 * Set the current picture type preference for a user.
 *
 * @param object $account
 *   User object.
 * @param string $picture_type
 *   New picture type.
 */
function userpickit_user_picture_type_set($account, $picture_type) {
  $account->data[USERPICKIT_USER_PICTURE_TYPE_CURRENT] = $picture_type;
  user_save($account);
}

/**
 * Get the current picture type preference for a user.
 *
 * Will always return a valid and active picture type.
 *
 * @param object $account
 *   User object.
 */
function userpickit_user_picture_type_get($account) {
  $user_picture_type = isset($account->data[USERPICKIT_USER_PICTURE_TYPE_CURRENT]) ? $account->data['userpickit_type'] : NULL;
  return userpickit_type_info($user_picture_type) ? $user_picture_type : userpickit_site_picture_type_get();
}

/**
 * Get the default picture type for the site.
 */
function userpickit_site_picture_type_get() {
  $site_picture_type = variable_get('userpickit_default', 'user');
  return userpickit_type_info($site_picture_type) ? $site_picture_type : 'user';
}

/**
 * Store the current user picture in $user->picture.
 *
 * If the active picture is not local, or the remote has not been cached, then
 * $account->picture will reset to an empty picture.
 *
 * See variable entry.
 * @param int $uid
 *   User ID.
 */
function userpickit_user_picture_reset($uid) {
  $account = user_load($uid);

  if (!$account) {
    return;
  }

  $account->picture = 0;

  $type = userpickit_user_picture_type_get($account);

  $cache = userpickit_cache_get($type, $account->uid);
  if ($cache && $cache->fid) {
    $account->picture = file_load($cache->fid);
  }

  user_save($account);
}

/**
 * If a uri is local, we will check if the file exists.
 */
function userpickit_valid_uri($uri) {
  if (valid_url($uri)) {
    if (file_valid_uri($uri)) {
      return file_exists($uri);
    }
    return TRUE;
  }

  return FALSE;
}

/**
 * Get actual user account for displayed entity, instead of bogitive object.
 *
 * Load $account->picture with file object if available.
 *
 * Taken from _gravatar_load_account()
 *
 * Thanks :)
 *
 * @param object $account
 *   Node, comment, or user object.
 * @return object
 *   User object.
 *
 * @see _gravatar_load_account()
 */
function _userpickit_load_account($account) {
  // If this is a node or comment object, load the user object.
  if (!empty($account->nid) || !empty($account->cid) || empty($account->roles)) {
    $original_values = $account;

    $account = $account->uid ? user_load($account->uid) : drupal_anonymous_user();

    // Load mail/homepage variable from an anonymous comment.
    if (!$account->uid) {
      $values = array_fill_keys(array('name', 'mail', 'homepage', 'hostname'), '');
      foreach ($values as $value => $default_value) {
        if (empty($account->$value)) {
          $account->$value = !empty($original_values->$value) ? $original_values->$value : $default_value;
        }
      }
    }
  }

  if (isset($account->picture) && is_numeric($account->picture)) {
    $account->picture = file_load($account->picture);
  }

  return $account;
}